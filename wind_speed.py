# -*- coding: utf-8 -*-
"""Wind Speed.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1s5jzw-O93s-XAm2NQeg0YCOtC9bS4Dl5
"""

import tensorflow as tf
print(tf.__version__)
!python --version

from google.colab import drive
drive.mount('/content/gdrive')

cd /content/gdrive/MyDrive/weather

import numpy as np 
import pandas as pd 

import os
for dirname, _, filenames in os.walk('/content/gdrive/MyDrive/weather'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

data=pd.read_csv('/content/gdrive/MyDrive/weather/weatherAUS.csv')

data.sample(5)

data['Date']=pd.to_datetime(data['Date'])

data.Date.sample(5)

data.iloc[:,6].isna().sum()

import datetime as dt
data['month']=pd.to_datetime(data.Date).dt.to_period('M')

data.month.value_counts()

aa=data.iloc[:,6].name
ac=data.groupby(by='month')[aa].mean()
ab=data['WindSpeed3pm'].isna()
data.loc[ab,['WindSpeed3pm']]=data.loc[ab,'month'].apply(lambda x:ac[x])
data['WindSpeed3pm'].isna().sum()

new_df=pd.DataFrame(list(data['WindSpeed3pm']),index=data.Date,columns=['WindSpeed3pm'])

new_df=new_df.resample('D').mean()

from keras.layers import Bidirectional,LSTM,Dense,Flatten,Conv1D,MaxPooling1D,Dropout,RepeatVector
from keras.models import Sequential
from keras.callbacks import EarlyStopping,ReduceLROnPlateau

early_stop=EarlyStopping(monitor='loss',patience=5)

model=Sequential([Conv1D(100,kernel_size=3,input_shape=(30,1),activation='relu'),
                  Conv1D(100,kernel_size=3),
                  Conv1D(100,kernel_size=3),
                  MaxPooling1D(2),
                 Flatten(),
                  RepeatVector(30),
                 LSTM(128,activation='relu',return_sequences=True),
                 LSTM(128,activation='relu',return_sequences=True),
                  Bidirectional(LSTM(64,activation='relu')),
                 Dense(128,activation='relu'),
                 Dense(1)])

model.compile(optimizer='adam',loss='mse',metrics=['accuracy'])

new_df1=pd.DataFrame(list(data['WindSpeed3pm']), index=data['Date'], columns=['WindSpeed3pm'])

new_df1=new_df1.resample('D').mean()
new_df1.WindSpeed3pm.isna().sum()

new_df1.fillna(data['WindSpeed3pm'].mean(),inplace=True)
new_df1.WindSpeed3pm.isna().sum()

from sklearn.preprocessing import MinMaxScaler

scaler=MinMaxScaler(feature_range=(-1,1))

scaled_data=scaler.fit_transform(new_df1)
scaled_data[:5]

steps=30
inp1=[]
out1=[]

for i in range(len(scaled_data)-steps):
    inp1.append(scaled_data[i:i+steps])
    out1.append(scaled_data[i+steps])

inp1=np.asanyarray(inp1)
out1=np.asanyarray(out1)
x_train1=inp1[:500,:,:]
x_test1=inp1[500:,:,:]
y_train1=out1[:500]
y_test1=out1[500:]

gpus = tf.config.experimental.list_physical_devices('GPU')
if gpus:
  try:
    for gpu in gpus:
      tf.config.experimental.set_memory_growth(gpu, True)
  except RuntimeError as e:
    print(e)

model.fit(x_train1,y_train1,epochs=500)

predicted=model.predict(x_test1)

predicted1=scaler.inverse_transform(predicted)

y_test2=scaler.inverse_transform(y_test1)

import matplotlib.pyplot as plt
plt.figure(figsize=(20,5))
plt.plot(y_test2,'g',label='actual')
plt.plot(predicted1,'r',label='predicted')

plt.legend()
plt.show()

from tensorflow.keras.models import load_model

model.save("/content/gdrive/MyDrive/Weather Forecast Dataset/LSTM_model.h5")

